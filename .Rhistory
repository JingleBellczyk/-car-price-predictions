data <- data[-which(data$Mileage > q), ]  # Remove rows where Mileage is greater than 99th percentile
data <- data[order(data$Mileage), ]  # Reset index
rownames(data) <- NULL  # Reset row names
summary(data)  # 41 rows have been dropped
data
nrow(data)
nrow(data)
q <- quantile(data$Mileage, 0.99)
data <- data[-which(data$Mileage > q), ]  # Remove rows where Mileage is greater than 99th percentile
data <- data[order(data$Mileage), ]  # Reset index
rownames(data) <- NULL  # Reset row names
summary(data)  # 41 rows have been dropped
data
nrow(data)
nrow(data)
q <- quantile(data$Mileage, 0.99)
data <- data[-which(data$Mileage > q), ]  # Remove rows where Mileage is greater than 99th percentile
data <- data[order(data$Mileage), ]  # Reset index
rownames(data) <- NULL  # Reset row names
summary(data)  # 41 rows have been dropped
data
nrow(data)
plot(cars)
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
if (!requireNamespace("caret", quietly = TRUE)) {
install.packages("caret")
}
if (!requireNamespace("car", quietly = TRUE)) {
install.packages("car")
}
# Load necessary libraries
library(tidyverse)  # Includes ggplot2, dplyr, and readr
library(caret)      # For modeling and preprocessing data
library(car)        # Contains functions for VIF (Variance Inflation Factor)
# Plot settings, similar to sns.set()
theme_set(theme_minimal())
# Load data from CSV file
data <- read_csv("car_dataset.csv")
# Check the structure of the data
str(data)
# Display the first few rows of the data
head(data)
# Describe the data, similar to data.describe(include="all")
summary(data)
# Load necessary libraries
library(tidyverse)  # Includes ggplot2, dplyr, and readr
# Numeric columns (assuming they contain only numeric data)
numeric_columns <- c("Price", "Mileage", "Year")  # Replace ... with actual column names
# Non-numeric columns (assuming they contain at least one non-numeric value)
non_numeric_columns <- c("Brand", "Body", "EngineV", "Engine Type", "Registration","Model")  # Replace ... with actual column names
# Define the number of rows of plots for each type
n_numeric <- length(numeric_columns)
n_non_numeric <- length(non_numeric_columns)
# Get the column names of the data
all_columns <- colnames(data)
# Function to get ylim for histograms
get_hist_ylim <- function(column_data) {
hist_info <- hist(column_data, plot = FALSE)
return(c(3, max(hist_info$counts) * 1.2))  # Adding some space above the highest bar
}
# Function to get ylim for bar plots
get_barplot_ylim <- function(column_data) {
bar_info <- table(column_data)
return(c(0, max(bar_info) * 1.2))  # Adding some space above the highest bar
}
# Plot histograms for numeric columns
for (i in 1:n_numeric) {
column_data <- data[[numeric_columns[i]]]
hist(column_data, main = numeric_columns[i], xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
}
# Plot bar plots for non-numeric columns
for (i in 1:n_non_numeric) {
column_data <- data[[non_numeric_columns[i]]]
barplot(table(column_data), main = non_numeric_columns[i], xlab = "", col = "lightblue", border = "black", ylim = get_barplot_ylim(column_data), las=2,ylab="Count")
}
data
nrow(data)
q <- quantile(data$Mileage, 0.99)
data <- data[-which(data$Mileage > q), ]  # Remove rows where Mileage is greater than 99th percentile
data <- data[order(data$Mileage), ]  # Reset index
rownames(data) <- NULL  # Reset row names
summary(data)  # 41 rows have been dropped
data
nrow(data)
# Load necessary libraries
library(tidyverse)  # Includes ggplot2, dplyr, and readr
# Numeric columns (assuming they contain only numeric data)
numeric_columns <- c("Price", "Mileage", "Year")  # Replace ... with actual column names
# Non-numeric columns (assuming they contain at least one non-numeric value)
non_numeric_columns <- c("Brand", "Body", "EngineV", "Engine Type", "Registration","Model")  # Replace ... with actual column names
# Define the number of rows of plots for each type
n_numeric <- length(numeric_columns)
n_non_numeric <- length(non_numeric_columns)
# Get the column names of the data
all_columns <- colnames(data)
# Function to get ylim for histograms
get_hist_ylim <- function(column_data) {
hist_info <- hist(column_data, plot = FALSE)
return(c(3, max(hist_info$counts) * 1.2))  # Adding some space above the highest bar
}
# Function to get ylim for bar plots
get_barplot_ylim <- function(column_data) {
bar_info <- table(column_data)
return(c(0, max(bar_info) * 1.2))  # Adding some space above the highest bar
}
# Plot histograms for numeric columns
for (i in 1:n_numeric) {
column_data <- data[[numeric_columns[i]]]
hist(column_data, main = numeric_columns[i], xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
}
# Plot bar plots for non-numeric columns
for (i in 1:n_non_numeric) {
column_data <- data[[non_numeric_columns[i]]]
barplot(table(column_data), main = non_numeric_columns[i], xlab = "", col = "lightblue", border = "black", ylim = get_barplot_ylim(column_data), las=2,ylab="Count")
}
data
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
data
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
#------------------------------------------------
q <- quantile(data$Mileage, 0.99)
data <- data[-which(data$Mileage > q), ]  # Remove rows where Mileage is greater than 99th percentile
data <- data[order(data$Mileage), ]  # Reset index
rownames(data) <- NULL  # Reset row names
#------------------------------------------------
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
data  # 41 rows have been dropped
plot(cars)
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
if (!requireNamespace("caret", quietly = TRUE)) {
install.packages("caret")
}
if (!requireNamespace("car", quietly = TRUE)) {
install.packages("car")
}
# Load necessary libraries
library(tidyverse)  # Includes ggplot2, dplyr, and readr
library(caret)      # For modeling and preprocessing data
library(car)        # Contains functions for VIF (Variance Inflation Factor)
# Plot settings, similar to sns.set()
theme_set(theme_minimal())
# Load data from CSV file
data <- read_csv("car_dataset.csv")
# Check the structure of the data
str(data)
# Display the first few rows of the data
head(data)
# Describe the data, similar to data.describe(include="all")
summary(data)
# Load necessary libraries
library(tidyverse)  # Includes ggplot2, dplyr, and readr
# Numeric columns (assuming they contain only numeric data)
numeric_columns <- c("Price", "Mileage", "Year")  # Replace ... with actual column names
# Non-numeric columns (assuming they contain at least one non-numeric value)
non_numeric_columns <- c("Brand", "Body", "EngineV", "Engine Type", "Registration","Model")  # Replace ... with actual column names
# Define the number of rows of plots for each type
n_numeric <- length(numeric_columns)
n_non_numeric <- length(non_numeric_columns)
# Get the column names of the data
all_columns <- colnames(data)
# Function to get ylim for histograms
get_hist_ylim <- function(column_data) {
hist_info <- hist(column_data, plot = FALSE)
return(c(3, max(hist_info$counts) * 1.2))  # Adding some space above the highest bar
}
# Function to get ylim for bar plots
get_barplot_ylim <- function(column_data) {
bar_info <- table(column_data)
return(c(0, max(bar_info) * 1.2))  # Adding some space above the highest bar
}
# Plot histograms for numeric columns
for (i in 1:n_numeric) {
column_data <- data[[numeric_columns[i]]]
hist(column_data, main = numeric_columns[i], xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
}
# Plot bar plots for non-numeric columns
for (i in 1:n_non_numeric) {
column_data <- data[[non_numeric_columns[i]]]
barplot(table(column_data), main = non_numeric_columns[i], xlab = "", col = "lightblue", border = "black", ylim = get_barplot_ylim(column_data), las=2,ylab="Count")
}
data
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
#------------------------------------------------
q <- quantile(data$Mileage, 0.99)
data <- data[-which(data$Mileage > q), ]  # Remove rows where Mileage is greater than 99th percentile
data <- data[order(data$Mileage), ]  # Reset index
rownames(data) <- NULL  # Reset row names
#------------------------------------------------
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
data  # 41 rows have been dropped
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
# Calculate the 1st percentile for the 'Year' column
q <- quantile(data$Year, 0.01)
q
# Remove rows where 'Year' is less than the 1st percentile
data <- data[data$Year >= q, ]
data <- data[order(data$Year), ]  # Reset index
rownames(data) <- NULL  # Reset row names
# Display summary statistics
summary(data)
# Calculate the 1st percentile for the 'Year' column
q <- quantile(data$Year, 0.01)
# Remove rows where 'Year' is less than the 1st percentile
data <- data[data$Year >= q, ]
data <- data[order(data$Year), ]  # Reset index
rownames(data) <- NULL  # Reset row names
# Display summary statistics
data
column_data <- data[["Year"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
#----------------------------
# Calculate the 1st percentile for the 'Year' column
q <- quantile(data$Year, 0.01)
# Remove rows where 'Year' is less than the 1st percentile
data <- data[data$Year >= q, ]
data <- data[order(data$Year), ]  # Reset index
rownames(data) <- NULL  # Reset row names
#----------------------------
# Display summary statistics
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
data
column_data <- data[["Year"]]
hist(column_data, main = "Year", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
#----------------------------
# Calculate the 1st percentile for the 'Year' column
q <- quantile(data$Year, 0.01)
# Remove rows where 'Year' is less than the 1st percentile
data <- data[data$Year >= q, ]
data <- data[order(data$Year), ]  # Reset index
rownames(data) <- NULL  # Reset row names
#----------------------------
# Display summary statistics
column_data <- data[["Year"]]
hist(column_data, main = "Year", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
data
# Create a histogram for the 'Model' column
histogram <- data.frame(Model = data$Model)
histogram$Count <- rep(1, nrow(data))
# Group by 'Model' and count the occurrences
histogram <- aggregate(Count ~ Model, data = histogram, FUN = length)
q <- 50
# Find models with a count less than the threshold 'q'
models_to_drop <- histogram$Model[histogram$Count < q]
# Get the number of models to drop
length(models_to_drop)
# Create a histogram for the 'Model' column
histogram <- data.frame(Model = data$Model)
histogram$Count <- rep(1, nrow(data))
# Group by 'Model' and count the occurrences
histogram <- aggregate(Count ~ Model, data = histogram, FUN = length)
q <- 50
# Find models with a count less than the threshold 'q'
models_to_drop <- histogram$Model[histogram$Count < q]
# Get the number of models to drop
length(models_to_drop)
# Remove rows where 'Model' is in the models_to_drop list
for (model in models_to_drop) {
data <- data[data$Model != model, ]
}
# Reset row names
rownames(data) <- NULL
# Display summary statistics
summary(data)
# Create a histogram for the 'Model' column
histogram <- data.frame(Model = data$Model)
histogram$Count <- rep(1, nrow(data))
# Group by 'Model' and count the occurrences
histogram <- aggregate(Count ~ Model, data = histogram, FUN = length)
q <- 50
# Find models with a count less than the threshold 'q'
models_to_drop <- histogram$Model[histogram$Count < q]
# Get the number of models to drop
length(models_to_drop)
# Remove rows where 'EngineV' is greater than 8.2
data <- data[data$EngineV <= 8.2, ]
# Reset the row indices
rownames(data) <- NULL
# Display descriptive statistics
summary(data)
# Assuming you want to see how many rows were removed
removed_rows <- nrow(data[data$EngineV > 8.2, ])
cat("Number of removed rows:", removed_rows)
# Install and load the 'psych' package for more detailed summary statistics
install.packages("psych")
library(psych)
# Assuming you have a dataframe named 'data'
# Remove rows where 'EngineV' is greater than 8.2
data <- data[data$EngineV <= 8.2, ]
# Reset the row indices
rownames(data) <- NULL
# Display detailed descriptive statistics
describe(data)
plot(cars)
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
if (!requireNamespace("caret", quietly = TRUE)) {
install.packages("caret")
}
if (!requireNamespace("car", quietly = TRUE)) {
install.packages("car")
}
# Load necessary libraries
library(tidyverse)  # Includes ggplot2, dplyr, and readr
library(caret)      # For modeling and preprocessing data
library(car)        # Contains functions for VIF (Variance Inflation Factor)
# Plot settings, similar to sns.set()
theme_set(theme_minimal())
# Load data from CSV file
data <- read_csv("car_dataset.csv")
# Check the structure of the data
str(data)
# Display the first few rows of the data
head(data)
# Describe the data, similar to data.describe(include="all")
summary(data)
# Load necessary libraries
library(tidyverse)  # Includes ggplot2, dplyr, and readr
# Numeric columns (assuming they contain only numeric data)
numeric_columns <- c("Price", "Mileage", "Year")  # Replace ... with actual column names
# Non-numeric columns (assuming they contain at least one non-numeric value)
non_numeric_columns <- c("Brand", "Body", "EngineV", "Engine Type", "Registration","Model")  # Replace ... with actual column names
# Define the number of rows of plots for each type
n_numeric <- length(numeric_columns)
n_non_numeric <- length(non_numeric_columns)
# Get the column names of the data
all_columns <- colnames(data)
# Function to get ylim for histograms
get_hist_ylim <- function(column_data) {
hist_info <- hist(column_data, plot = FALSE)
return(c(3, max(hist_info$counts) * 1.2))  # Adding some space above the highest bar
}
# Function to get ylim for bar plots
get_barplot_ylim <- function(column_data) {
bar_info <- table(column_data)
return(c(0, max(bar_info) * 1.2))  # Adding some space above the highest bar
}
# Plot histograms for numeric columns
for (i in 1:n_numeric) {
column_data <- data[[numeric_columns[i]]]
hist(column_data, main = numeric_columns[i], xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
}
# Plot bar plots for non-numeric columns
for (i in 1:n_non_numeric) {
column_data <- data[[non_numeric_columns[i]]]
barplot(table(column_data), main = non_numeric_columns[i], xlab = "", col = "lightblue", border = "black", ylim = get_barplot_ylim(column_data), las=2,ylab="Count")
}
data
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
#------------------------------------------------
q <- quantile(data$Mileage, 0.99)
data <- data[-which(data$Mileage > q), ]  # Remove rows where Mileage is greater than 99th percentile
data <- data[order(data$Mileage), ]  # Reset index
rownames(data) <- NULL  # Reset row names
#------------------------------------------------
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
data  # 41 rows have been dropped
column_data <- data[["Year"]]
hist(column_data, main = "Year", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
#----------------------------
# Calculate the 1st percentile for the 'Year' column
q <- quantile(data$Year, 0.01)
# Remove rows where 'Year' is less than the 1st percentile
data <- data[data$Year >= q, ]
data <- data[order(data$Year), ]  # Reset index
rownames(data) <- NULL  # Reset row names
#----------------------------
# Display summary statistics
column_data <- data[["Year"]]
hist(column_data, main = "Year", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
data
# Create a histogram for the 'Model' column
histogram <- data.frame(Model = data$Model)
histogram$Count <- rep(1, nrow(data))
# Group by 'Model' and count the occurrences
histogram <- aggregate(Count ~ Model, data = histogram, FUN = length)
q <- 50
# Find models with a count less than the threshold 'q'
models_to_drop <- histogram$Model[histogram$Count < q]
# Get the number of models to drop
length(models_to_drop)
# Remove the 'Model' column from the data frame
data <- data[, !names(data) %in% "Model"]
# Install and load the 'psych' package for more detailed summary statistics
install.packages("psych")
library(psych)
# Assuming you have a dataframe named 'data'
# Remove rows where 'EngineV' is greater than 8.2
data <- data[data$EngineV <= 8.2, ]
# Reset the row indices
rownames(data) <- NULL
# Display detailed descriptive statistics
describe(data)
install.packages("psych")
plot(cars)
if (!requireNamespace("tidyverse", quietly = TRUE)) {
install.packages("tidyverse")
}
if (!requireNamespace("caret", quietly = TRUE)) {
install.packages("caret")
}
if (!requireNamespace("car", quietly = TRUE)) {
install.packages("car")
}
# Load necessary libraries
library(tidyverse)  # Includes ggplot2, dplyr, and readr
library(caret)      # For modeling and preprocessing data
library(car)        # Contains functions for VIF (Variance Inflation Factor)
# Plot settings, similar to sns.set()
theme_set(theme_minimal())
# Load data from CSV file
data <- read_csv("car_dataset.csv")
# Check the structure of the data
str(data)
# Display the first few rows of the data
head(data)
# Describe the data, similar to data.describe(include="all")
summary(data)
# Load necessary libraries
library(tidyverse)  # Includes ggplot2, dplyr, and readr
# Numeric columns (assuming they contain only numeric data)
numeric_columns <- c("Price", "Mileage", "Year")  # Replace ... with actual column names
# Non-numeric columns (assuming they contain at least one non-numeric value)
non_numeric_columns <- c("Brand", "Body", "EngineV", "Engine Type", "Registration","Model")  # Replace ... with actual column names
# Define the number of rows of plots for each type
n_numeric <- length(numeric_columns)
n_non_numeric <- length(non_numeric_columns)
# Get the column names of the data
all_columns <- colnames(data)
# Function to get ylim for histograms
get_hist_ylim <- function(column_data) {
hist_info <- hist(column_data, plot = FALSE)
return(c(3, max(hist_info$counts) * 1.2))  # Adding some space above the highest bar
}
# Function to get ylim for bar plots
get_barplot_ylim <- function(column_data) {
bar_info <- table(column_data)
return(c(0, max(bar_info) * 1.2))  # Adding some space above the highest bar
}
# Plot histograms for numeric columns
for (i in 1:n_numeric) {
column_data <- data[[numeric_columns[i]]]
hist(column_data, main = numeric_columns[i], xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
}
# Plot bar plots for non-numeric columns
for (i in 1:n_non_numeric) {
column_data <- data[[non_numeric_columns[i]]]
barplot(table(column_data), main = non_numeric_columns[i], xlab = "", col = "lightblue", border = "black", ylim = get_barplot_ylim(column_data), las=2,ylab="Count")
}
data
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
#------------------------------------------------
q <- quantile(data$Mileage, 0.99)
data <- data[-which(data$Mileage > q), ]  # Remove rows where Mileage is greater than 99th percentile
data <- data[order(data$Mileage), ]  # Reset index
rownames(data) <- NULL  # Reset row names
#------------------------------------------------
column_data <- data[["Mileage"]]
hist(column_data, main = "Mileage", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
data  # 41 rows have been dropped
column_data <- data[["Year"]]
hist(column_data, main = "Year", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
#----------------------------
# Calculate the 1st percentile for the 'Year' column
q <- quantile(data$Year, 0.01)
# Remove rows where 'Year' is less than the 1st percentile
data <- data[data$Year >= q, ]
data <- data[order(data$Year), ]  # Reset index
rownames(data) <- NULL  # Reset row names
#----------------------------
# Display summary statistics
column_data <- data[["Year"]]
hist(column_data, main = "Year", xlab = "", col = "lightblue", border = "black", ylim = get_hist_ylim(column_data),ylab="Count")
data
# Create a histogram for the 'Model' column
histogram <- data.frame(Model = data$Model)
histogram$Count <- rep(1, nrow(data))
# Group by 'Model' and count the occurrences
histogram <- aggregate(Count ~ Model, data = histogram, FUN = length)
q <- 50
# Find models with a count less than the threshold 'q'
models_to_drop <- histogram$Model[histogram$Count < q]
# Get the number of models to drop
length(models_to_drop)
# Remove the 'Model' column from the data frame
data <- data[, !names(data) %in% "Model"]
# Install and load the 'psych' package for more detailed summary statistics
install.packages("psych")
library(psych)
# Assuming you have a dataframe named 'data'
# Remove rows where 'EngineV' is greater than 8.2
data <- data[data$EngineV <= 8.2, ]
# Reset the row indices
rownames(data) <- NULL
# Display detailed descriptive statistics
describe(data)
